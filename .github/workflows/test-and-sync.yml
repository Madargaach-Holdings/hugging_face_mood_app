name: Test & Sync to Hugging Face Space

# Trigger on pushes to main
on:
  push:
    branches: [main]

jobs:
  test-and-sync:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Step 3: Install dependencies
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Step 4: Run local model tests
      - name: Run local model tests
        id: test
        run: |
          echo "üß™ Running local model tests..."
          python -m pytest test_local_model.py -v
          echo "‚úÖ All tests passed!"

      # Step 5: Sync to Hugging Face Spaces (only if tests passed)
      - name: Push to Hugging Face Hub
        if: success()  # Only runs if previous step succeeded
        env:
          HF_USERNAME: ${{ secrets.HF_USERNAME }}
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_SPACE: ${{ secrets.HF_SPACE_NAME }}
        run: |
          echo "üîÑ Setting up Git for Hugging Face push..."
          
          # Configure Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Clone the Hugging Face Space repository
          echo "üì• Cloning Hugging Face Space..."
          git clone "https://$HF_USERNAME:$HF_TOKEN@huggingface.co/spaces/$HF_USERNAME/$HF_SPACE" hf-space
          cd hf-space
          
          # Copy files from current repo to HF space
          echo "üìã Copying files..."
          cp ../app.py .
          cp ../requirements.txt .
          cp ../README.md .
          cp ../test_local_model.py .
          cp ../telegram_notifier.py .
          cp ../TELEGRAM_SETUP.md .
          
          # Commit and push changes
          echo "üíæ Committing changes..."
          git add .
          git commit -m "Auto-sync from GitHub: ${{ github.event.head_commit.message }}" || echo "No changes to commit"
          
          echo "üì§ Pushing to Hugging Face Spaces..."
          git push origin main
          
          echo "‚úÖ Successfully synced to Hugging Face Spaces!"

      # Step 6: Send Telegram notification on success
      - name: Send Telegram Success Notification
        if: success()
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python3 -c "
          import requests
          import os
          from datetime import datetime
          
          BOT_TOKEN = '8119497602:AAEGqaZ_HJjX_asIu43rZMqoDFnz_jmq3dY'
          CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
          
          if CHAT_ID:
              timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
              message = f'''üöÄ <b>GitHub Action Update</b>
              ‚úÖ <b>Status:</b> SUCCESS
              üìã <b>Workflow:</b> Test & Sync to Hugging Face
              ‚è∞ <b>Time:</b> {timestamp}
              üë§ <b>Actor:</b> ${{ github.actor }}
              üìù <b>Commit:</b> ${{ github.event.head_commit.message }}
              üîó <b>Repository:</b> ${{ github.repository }}
              
              <i>MLOps Case Study - Mood Analysis App</i>'''
              
              url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
              payload = {'chat_id': CHAT_ID, 'text': message, 'parse_mode': 'HTML'}
              requests.post(url, json=payload)
              print('‚úÖ Telegram notification sent!')
          else:
              print('‚ö†Ô∏è TELEGRAM_CHAT_ID not set, skipping notification')
          "

      # Step 7: Send Telegram notification on failure
      - name: Send Telegram Failure Notification
        if: failure()
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python3 -c "
          import requests
          import os
          from datetime import datetime
          
          BOT_TOKEN = '8119497602:AAEGqaZ_HJjX_asIu43rZMqoDFnz_jmq3dY'
          CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
          
          if CHAT_ID:
              timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
              message = f'''üöÄ <b>GitHub Action Update</b>
              ‚ùå <b>Status:</b> FAILED
              üìã <b>Workflow:</b> Test & Sync to Hugging Face
              ‚è∞ <b>Time:</b> {timestamp}
              üë§ <b>Actor:</b> ${{ github.actor }}
              üìù <b>Commit:</b> ${{ github.event.head_commit.message }}
              üîó <b>Repository:</b> ${{ github.repository }}
              
              <i>MLOps Case Study - Mood Analysis App</i>'''
              
              url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
              payload = {'chat_id': CHAT_ID, 'text': message, 'parse_mode': 'HTML'}
              requests.post(url, json=payload)
              print('‚ùå Telegram failure notification sent!')
          else:
              print('‚ö†Ô∏è TELEGRAM_CHAT_ID not set, skipping notification')
          "
